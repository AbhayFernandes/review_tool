// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "review_tool.proto" (package "review_service", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ReviewService } from "./review_tool";
import type { VerifySessionRequest } from "./review_tool";
import type { CreateSessionReply } from "./review_tool";
import type { Unit } from "./review_tool";
import type { UploadDiffRequest } from "./review_tool";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloReply } from "./review_tool";
import type { HelloRequest } from "./review_tool";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service review_service.ReviewService
 */
export interface IReviewServiceClient {
    /**
     * @generated from protobuf rpc: SayHello(review_service.HelloRequest) returns (review_service.HelloReply);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply>;
    /**
     * @generated from protobuf rpc: UploadDiff(review_service.UploadDiffRequest) returns (review_service.Unit);
     */
    uploadDiff(input: UploadDiffRequest, options?: RpcOptions): UnaryCall<UploadDiffRequest, Unit>;
    /**
     * @generated from protobuf rpc: CreateSession(review_service.Unit) returns (review_service.CreateSessionReply);
     */
    createSession(input: Unit, options?: RpcOptions): UnaryCall<Unit, CreateSessionReply>;
    /**
     * @generated from protobuf rpc: VerifySession(review_service.VerifySessionRequest) returns (review_service.Unit);
     */
    verifySession(input: VerifySessionRequest, options?: RpcOptions): UnaryCall<VerifySessionRequest, Unit>;
}
/**
 * @generated from protobuf service review_service.ReviewService
 */
export class ReviewServiceClient implements IReviewServiceClient, ServiceInfo {
    typeName = ReviewService.typeName;
    methods = ReviewService.methods;
    options = ReviewService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SayHello(review_service.HelloRequest) returns (review_service.HelloReply);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloRequest, HelloReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UploadDiff(review_service.UploadDiffRequest) returns (review_service.Unit);
     */
    uploadDiff(input: UploadDiffRequest, options?: RpcOptions): UnaryCall<UploadDiffRequest, Unit> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadDiffRequest, Unit>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateSession(review_service.Unit) returns (review_service.CreateSessionReply);
     */
    createSession(input: Unit, options?: RpcOptions): UnaryCall<Unit, CreateSessionReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Unit, CreateSessionReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifySession(review_service.VerifySessionRequest) returns (review_service.Unit);
     */
    verifySession(input: VerifySessionRequest, options?: RpcOptions): UnaryCall<VerifySessionRequest, Unit> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifySessionRequest, Unit>("unary", this._transport, method, opt, input);
    }
}
