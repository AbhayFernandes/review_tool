// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "review_tool.proto" (package "review_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message review_service.HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message review_service.HelloReply
 */
export interface HelloReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message review_service.UploadDiffRequest
 */
export interface UploadDiffRequest {
    /**
     * @generated from protobuf field: string diff = 1;
     */
    diff: string;
    /**
     * @generated from protobuf field: string user = 2;
     */
    user: string;
}
/**
 * @generated from protobuf message review_service.CreateSessionReply
 */
export interface CreateSessionReply {
    /**
     * @generated from protobuf field: string nonce = 1;
     */
    nonce: string;
}
/**
 * @generated from protobuf message review_service.VerifySessionRequest
 */
export interface VerifySessionRequest {
    /**
     * @generated from protobuf field: string signedNonce = 1;
     */
    signedNonce: string;
    /**
     * @generated from protobuf field: string user = 2;
     */
    user: string;
}
/**
 * @generated from protobuf message review_service.Unit
 */
export interface Unit {
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor() {
        super("review_service.HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloRequest>): HelloRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<HelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloRequest): HelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloReply$Type extends MessageType<HelloReply> {
    constructor() {
        super("review_service.HelloReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloReply>): HelloReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<HelloReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloReply): HelloReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.HelloReply
 */
export const HelloReply = new HelloReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadDiffRequest$Type extends MessageType<UploadDiffRequest> {
    constructor() {
        super("review_service.UploadDiffRequest", [
            { no: 1, name: "diff", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadDiffRequest>): UploadDiffRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.diff = "";
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<UploadDiffRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadDiffRequest): UploadDiffRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string diff */ 1:
                    message.diff = reader.string();
                    break;
                case /* string user */ 2:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadDiffRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string diff = 1; */
        if (message.diff !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.diff);
        /* string user = 2; */
        if (message.user !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.UploadDiffRequest
 */
export const UploadDiffRequest = new UploadDiffRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionReply$Type extends MessageType<CreateSessionReply> {
    constructor() {
        super("review_service.CreateSessionReply", [
            { no: 1, name: "nonce", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSessionReply>): CreateSessionReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nonce = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionReply): CreateSessionReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nonce */ 1:
                    message.nonce = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nonce = 1; */
        if (message.nonce !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.CreateSessionReply
 */
export const CreateSessionReply = new CreateSessionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifySessionRequest$Type extends MessageType<VerifySessionRequest> {
    constructor() {
        super("review_service.VerifySessionRequest", [
            { no: 1, name: "signedNonce", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifySessionRequest>): VerifySessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signedNonce = "";
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<VerifySessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifySessionRequest): VerifySessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string signedNonce */ 1:
                    message.signedNonce = reader.string();
                    break;
                case /* string user */ 2:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifySessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string signedNonce = 1; */
        if (message.signedNonce !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.signedNonce);
        /* string user = 2; */
        if (message.user !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.VerifySessionRequest
 */
export const VerifySessionRequest = new VerifySessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Unit$Type extends MessageType<Unit> {
    constructor() {
        super("review_service.Unit", []);
    }
    create(value?: PartialMessage<Unit>): Unit {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Unit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Unit): Unit {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Unit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message review_service.Unit
 */
export const Unit = new Unit$Type();
/**
 * @generated ServiceType for protobuf service review_service.ReviewService
 */
export const ReviewService = new ServiceType("review_service.ReviewService", [
    { name: "SayHello", options: {}, I: HelloRequest, O: HelloReply },
    { name: "UploadDiff", options: {}, I: UploadDiffRequest, O: Unit },
    { name: "CreateSession", options: {}, I: Unit, O: CreateSessionReply },
    { name: "VerifySession", options: {}, I: VerifySessionRequest, O: Unit }
]);
